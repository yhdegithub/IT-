import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int q = Integer.parseInt(br.readLine());
        MedianHolder holder = new MedianHolder();
        StringBuilder res = new StringBuilder();
        for (int i = 0; i < q; i++) {
            String[] split = br.readLine().split(" ");
            int opt = Integer.parseInt(split[0]);
            switch (opt) {
                case 1:
                    holder.add(Integer.parseInt(split[1]));
                    break;
                case 2:
                    res.append(holder.midNum() + "\n");
            }
        }
        System.out.println(res.substring(0, res.length() - 1));
    }
}
class MedianHolder {
    private PriorityQueue<Integer> minHeap;
    private PriorityQueue<Integer> maxHeap;
//    private int count = 0;

    public MedianHolder() {
        this.minHeap = new PriorityQueue<>();
        this.maxHeap = new PriorityQueue<>((o1, o2) -> o2 - o1);
    }

    public void add(int n) {
        int size = minHeap.size() + maxHeap.size();
        if ((size & 1) == 0) {
            maxHeap.offer(n);   //
            minHeap.offer(maxHeap.poll());
        } else {
            minHeap.offer(n);
            maxHeap.offer(minHeap.poll());
        }
//        count++
    }

    public String midNum() {    //double 330094220.5 用float长度太短
        int size = minHeap.size() + maxHeap.size();
        if (size == 0) {
            return "-1";
        }
        if ((size & 1) == 0) {
            return String.format("%.1f", (double)(minHeap.peek() + maxHeap.peek()) / 2);  //
        } else {
            return String.format("%.1f", (double)minHeap.peek());
        }

    }
}